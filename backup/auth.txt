// Sign in user check
// router.post(
//   // Route Path
//   '/login', 
//   // Express Validations
//   [
//     body('email','Enter a valid email.').isEmail(),
//     body('password','Password cannot be blank.').exists(),
//   ], 
//   // API body
//   async (req,res) => {
//     const errors = validationResult(req);
//     // Checking if validations are fulfilled
//     if (!errors.isEmpty()) {
//       return res.status(400).json({ errors: errors.array() });
//     }
//     // Check whether the user with this email already exists
//     const {email, password} = req.body;

//     try {
//       let user = await User.findOne({email});
//       if (!user){
//         return res.status(400).json({error: "Invalid Email or Password"})
//       }

//       const passwordCompare = await bcrypt.compare(password, user.password);
//       if (!passwordCompare){
//         return res.status(400).json({error: "Invalid Email or Password"})
//       }

//     // Sending the user object as a response
//       const data = {
//         user: {
//           id: user.id
//         }
//       }
//       const authToken = jwt.sign(data, JWT_SECRET);
//       console.log(authToken);
//       res.json({authToken});
//     } 
//       catch (error) {
//         console.log(error);
//         res.status(500).send("Internal server error")
//     }
    
//   } 
// )


// Create User in DB using POST API
// router.post(
//   // Route Path
//   '/create-user', 
//   // Express Validations
//   [
//     body('name', 'Name must be atleast 3 characters long.').isLength({ min: 3 }),
//     body('email','Enter a valid email.').isEmail(),
//     body('password','Password must be atleast 5 characters long.').isLength({ min: 5 }),
//   ], 
//   // Final API body
//   async (req,res) => {
//     const errors = validationResult(req);
//     // Checking if validations are fulfilled
//     if (!errors.isEmpty()) {
//       return res.status(400).json({ errors: errors.array() });
//     }
//     // Check whether the user with this email already exists
//     try {
//       let user = await User.findOne({email:req.body.email});
//       if (user){
//         return res.status(400).json({error: "Sorry a user with this email already exists."})
//       }
//     const salt = await  bcrypt.genSalt(10);
//     const secPass = await bcrypt.hash(req.body.password, salt);
//     // Creating user by using create method of mongoose model
//       user = await User.create({
//         name: req.body.name,
//         password: secPass,
//         email: req.body.email,
//       });
//     // Sending the user object as a response
//       const data = {
//         user: {
//           id: user.id
//         }
//       }
//       const authToken = jwt.sign(data, JWT_SECRET);
//       console.log(authToken);
//       res.json({authToken});
//     } 
//       catch (error) {
//         console.log(error);
//         res.status(500).send("Internal server error")
//     }
    
//   } 
// )